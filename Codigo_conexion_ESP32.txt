#include <WiFi.h>
#include <PubSubClient.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <ArduinoJson.h>
#include <Wire.h>
#include <WiFiClientSecure.h>

#define VARIABLE_LABEL "sensor"
#define DEVICE_LABEL "publish"
#define SENSOR A0

const char *WIFISSID = "PEREGRINO_2.4";
const char *PASSWORD = "SHER1948";

Adafruit_MPU6050 mpu;

const char* mqtt_server = "qe514151.ala.us-east-1.emqxsl.com";
const int mqtt_port = 8883;
  
const char* mqtt_topic = "esp32/tesis";
const char *mqtt_username = "test";
const char *mqtt_password = "1234";

//Certificado CA para establecer conexión de manera segura por el broker 

const char *ca_cert = R"EOF(
-----BEGIN CERTIFICATE-----
MIIDrzCCApegAwIBAgIQCDvgVpBCRrGhdWrJWZHHSjANBgkqhkiG9w0BAQUFADBh
MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
d3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBD
QTAeFw0wNjExMTAwMDAwMDBaFw0zMTExMTAwMDAwMDBaMGExCzAJBgNVBAYTAlVT
MRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j
b20xIDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IENBMIIBIjANBgkqhkiG
9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4jvhEXLeqKTTo1eqUKKPC3eQyaKl7hLOllsB
CSDMAZOnTjC3U/dDxGkAV53ijSLdhwZAAIEJzs4bg7/fzTtxRuLWZscFs3YnFo97
nh6Vfe63SKMI2tavegw5BmV/Sl0fvBf4q77uKNd0f3p4mVmFaG5cIzJLv07A6Fpt
43C/dxC//AH2hdmoRBBYMql1GNXRor5H4idq9Joz+EkIYIvUX7Q6hL+hqkpMfT7P
T19sdl6gSzeRntwi5m3OFBqOasv+zbMUZBfHWymeMr/y7vrTC0LUq7dBMtoM1O/4
gdW7jVg/tRvoSSiicNoxBN33shbyTApOB6jtSj1etX+jkMOvJwIDAQABo2MwYTAO
BgNVHQ8BAf8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUA95QNVbR
TLtm8KPiGxvDl7I90VUwHwYDVR0jBBgwFoAUA95QNVbRTLtm8KPiGxvDl7I90VUw
DQYJKoZIhvcNAQEFBQADggEBAMucN6pIExIK+t1EnE9SsPTfrgT1eXkIoyQY/Esr
hMAtudXH/vTBH1jLuG2cenTnmCmrEbXjcKChzUyImZOMkXDiqw8cvpOp/2PV5Adg
06O/nVsJ8dWO41P0jmP6P6fbtGbfYmbW0W5BjfIttep3Sp+dWOIrWcBAI+0tKIJF
PnlUkiaY4IBIqDfv8NZ5YBberOgOzW6sRBc4L0na4UU+Krk2U886UAb3LujEV0ls
YSEY1QSteDwsOoBrp+uvFRTp2InBuThs4pFsiv9kuXclVzDAGySj4dzp30d8tbQk
CAUw7C29C79Fv1C5qfPrmAESrciIxpg0X40KPMbp1ZWVbd4=
-----END CERTIFICATE-----
)EOF";
WiFiClientSecure esp_client;
PubSubClient client(esp_client);


//Variables de tiempo para reconexion
unsigned long lastReconnectAttempt = 0;
unsigned long lastPublishTime = 0;
const long publishInterval = 1000;


void reconnect() {
  if (!client.connected()) {
    String client_id = "emqx_cloud5aa15d";
    Serial.printf("Intentando conexión MQTT como %s...\n", client_id.c_str());
    if (client.connect(client_id.c_str(), mqtt_username, mqtt_password)) {
      Serial.println("Conectado al broker MQTT");
    } else {
      Serial.print("Error de conexión, rc=");
      Serial.print(client.state());
      Serial.println(" - intentando de nuevo en 2 segundos");
      delay(2000);
    }
  }
}
void setup() {
    
    Serial.begin(115200);
    WiFi.begin(WIFISSID, PASSWORD);
    pinMode(SENSOR, INPUT);
    pinMode(41, INPUT);
    pinMode(40, INPUT);

    Serial.print("Waiting for WiFi...");
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }

    Serial.println("\nWiFi Connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
    esp_client.setCACert(ca_cert);
    client.setBufferSize(158);
    client.setServer(mqtt_server, mqtt_port);
    reconnect();

    if (!mpu.begin()) {
        Serial.println("No se ha encontrado el chip MPU6050");
        while (1) {
            delay(10);
        }
    }
    // Configuración del MPU6050
    mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
    mpu.setGyroRange(MPU6050_RANGE_500_DEG);
    mpu.setFilterBandwidth(MPU6050_BAND_5_HZ);
}

void loop() {
  if (!client.connected()) {
  reconnect();
  }
    if (WiFi.status() != WL_CONNECTED) {
       WiFi.reconnect();
    }
    client.loop();
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  StaticJsonDocument<158> doc;
  doc["ecg"] = analogRead(A0);
  doc["mpu"]["accel"]["x"] = a.acceleration.x;
  doc["mpu"]["accel"]["y"] = a.acceleration.y;
  doc["mpu"]["accel"]["z"] = a.acceleration.z;
  doc["mpu"]["gyro"]["x"] = g.gyro.x;
  doc["mpu"]["gyro"]["y"] = g.gyro.y;
  doc["mpu"]["gyro"]["z"] = g.gyro.z;
  doc["mpu"]["temp"] = temp.temperature;
  //  //Mensaje; para variar el tamaño del buffer enviado| Para añadir esta etapa del código debe modificar el valor de la función SetBufferSize - buffer[]-StaticJsonDocument<>  a un valor acorde a los bytes a enviar (Todos con el mismo valor de preferencia).
  //const char* mensaje= "";
  //doc["mensaje"] = mensaje;


  char buffer[158];
  serializeJson(doc, buffer);

  client.publish(mqtt_topic, buffer);
  Serial.print("Publicado en:");Serial.println(mqtt_topic);
  Serial.print("Tamaño completo del mensaje :");Serial.println(sizeof(buffer));
  Serial.print("Tamaño real del mensaje :"); Serial.println(strlen(buffer));
  int freeHeap = ESP.getFreeHeap();
  Serial.println("Free heap: " + String(freeHeap) + " bytes");

  delay(600000);
}
