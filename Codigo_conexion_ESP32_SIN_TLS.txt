
#include <WiFi.h>
#include <PubSubClient.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <ArduinoJson.h>
#include <Wire.h>
#define VARIABLE_LABEL "sensor" // Etiqueta variable
#define DEVICE_LABEL "publish" 
#define SENSOR A0 // Definir el pin A0 para el sensor ECG
// Configura los datos de la red WiFi
const char *WIFISSID = "RED_DE_PRUEBA";
const char *PASSWORD = "hugo12345";
Adafruit_MPU6050 mpu;
// Configura los datos del broker MQTT
const char* mqtt_server = "test.mosquitto.org";
const int mqtt_port = 1883; // puerto por defecto

// Configura el tópico MQTT donde quieres publicar los datos
const char* mqtt_topic = "esp32/tesis";
WiFiClient espClient;
PubSubClient client(espClient);

// Conecta el ESP32 al broker MQTT
void reconnect() {
  if (!client.connected()) {
    String client_id = "aeioausbdabso12323";
    Serial.printf("Intentando conexión MQTT como %s...\n", client_id.c_str());
    if (client.connect(client_id.c_str())) {
      Serial.println("Conectado al broker MQTT");
    } else {
      Serial.print("Error de conexión, rc=");
      Serial.print(client.state());
      Serial.println(" - intentando de nuevo en 2 segundos");
      delay(2000);
    }
  }
}


// Inicializa el puerto serie y la conexión WiFi y MQTT
void setup() {
  Serial.begin(115200);
  WiFi.begin(WIFISSID, PASSWORD);
  pinMode(SENSOR, INPUT);
  pinMode(41, INPUT);
  pinMode(40, INPUT);
  Serial.print("Waiting for WiFi...");
  while (WiFi.status() != WL_CONNECTED){
    delay(500);
    Serial.print(".");
  }
  Serial.println("WiFi Connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  client.setBufferSize(158); 
  client.setServer(mqtt_server, mqtt_port);
  reconnect();
  
  //Inicialización MPU6050
  if (!mpu.begin()) {
    Serial.println("No se ha encontrado el chip MPU6050");
    while (1) {
      delay(10);
    }
    }
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  mpu.setFilterBandwidth(MPU6050_BAND_5_HZ);
  delay(500);
}

// Envía los datos de los sensores en formato JSON por MQTT
void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  // Crea un objeto JSON con la capacidad estimada
  StaticJsonDocument<158> doc;
  doc["ecg"] = analogRead(A0); // sensor es el valor leído del sensor ECG AD8232
  doc["mpu"]["accel"]["x"] = a.acceleration.x; // a es el evento del sensor MPU6050
  doc["mpu"]["accel"]["y"] = a.acceleration.y;
  doc["mpu"]["accel"]["z"] = a.acceleration.z;
  doc["mpu"]["gyro"]["x"] = g.gyro.x; // g es el evento del sensor MPU6050
  doc["mpu"]["gyro"]["y"] = g.gyro.y;
  doc["mpu"]["gyro"]["z"] = g.gyro.z;
  doc["mpu"]["temp"] = temp.temperature;

  //Segunda iteracion para aumentar los mensajes
  char buffer[158];
  serializeJson(doc, buffer);
  // Publica la cadena JSON en el tema MQTT
  client.publish(mqtt_topic, buffer);
  Serial.print("Publicado en:");Serial.println(mqtt_topic);
  Serial.print("Tamaño completo del mensaje :");Serial.println(sizeof(buffer));
  Serial.print("Tamaño real del mensaje :"); Serial.println(strlen(buffer));

  // Espera un segundo antes de enviar el siguiente mensaje
  delay(1000);
}